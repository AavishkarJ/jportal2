variables:
  - group: JPortal2SensitiveVariables
  - name: isHotfix
    value: false

trigger: none

pool:
  vmImage: 'Ubuntu-16.04'

steps:
- checkout: self
  persistCredentials: true
- task: Maven@3
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  displayName: 'Maven verify'
  inputs:
    mavenPomFile: 'pom.xml'
    mavenOptions: '-Xmx3072m'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    publishJUnitResults: true
    testResultsFiles: '**/surefire-reports/TEST-*.xml'
    goals: 'clean verify'
- bash: |
    project_version=$(mvn -o help:evaluate -Dexpression=project.version -q -DforceStdout | cut -d- -f1 )
    echo "##vso[task.setvariable variable=project.version]$project_version"
  displayName: 'Extract current project version'
  # condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))  
  failOnStderr: true  
- bash: |
    echo "${project_version}-hotfix"
  displayName: 'Git tag hotfix'
  condition: and(succeeded(), and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), variables['isHotfix']))

# Add logic below
# if release
#    reset patch version
#    if major release
#      bump major version 
#      reset minor
#    create tag with CICD version
#    bump minor version <- for next dev cycle
# else if hotfix
#    bump patch <- think about this
#    create tag with CICD version
#    (want want to make hotfixes manual)
# push tag to remote

